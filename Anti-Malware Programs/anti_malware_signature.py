import hashlib
import os
import time
import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
from send2trash import send2trash

# 模拟恶意软件签名库（哈希值）_Emulating malware signature libraries (hashes)
SIGNATURES = {
    'test_malware_1': '7d150d3f664fab24815ce0d88db800b8',
    'test_malware_2': '4d18e2c96bb0f39c6d6dc690542b0bdc',
    'test_malware_3': '074fd28eff0f5adea071694061739e55',
    'test_malware_4': '787d941078d5f393ebf68b6026a139a7'
}

# 获取文件的MD5哈希值_Get the MD5 hash of the file
def get_md5(file_path):
    try:
        with open(file_path, 'rb') as f:
            file_hash = hashlib.md5()
            while chunk := f.read(8192):
                file_hash.update(chunk)
        return file_hash.hexdigest()
    except IOError:
        return None


# 获取文件大小（以字节为单位）_Get file size (in bytes)
def get_file_size(file_path):
    try:
        return os.path.getsize(file_path)
    except IOError:
        return 0


# 检查文件是否是恶意文件_Check if a file is malicious
def is_malicious(file_path):
    file_md5 = get_md5(file_path)
    if file_md5 in SIGNATURES.values():
        return True
    return False

def scan_directory(directory, result_box):
    result_box.insert(tk.END, f"Scanning directory: {directory}\n")
    result_box.yview(tk.END)
    malicious_files = []
    total_files = 0
    total_size = 0

    for root, dirs, files in os.walk(directory):
        total_files += len(files)
        total_size += sum(get_file_size(os.path.join(root, file)) for file in files)

    scanned_count = 0
    start_time = time.time()
    scanned_size = 0

    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_size = get_file_size(file_path)
            scanned_count += 1
            scanned_size += file_size
            result_box.insert(tk.END, f"Scanning file {scanned_count}/{total_files}: {file_path}\n")
            result_box.yview(tk.END)
            if is_malicious(file_path):
                result_box.insert(tk.END, f"Malicious file detected: {file_path}\n")
                malicious_files.append(file_path)

            # 每扫描一个文件，计算当前扫描速度（bytes/sec）_For each file scanned, calculate the current scan speed (bytes/sec)
            elapsed_time = time.time() - start_time
            if elapsed_time > 0:
                speed = scanned_size / elapsed_time
                result_box.insert(tk.END, f"Speed: {speed:.2f} bytes/sec\n")  # 以字节为单位显示_Displayed in "bytes/sec"

            result_box.update_idletasks()

    result_box.insert(tk.END, f"Scan completed. Total files scanned: {total_files}\n")
    result_box.insert(tk.END, f"Total size scanned: {total_size} bytes\n\n")

    if malicious_files:
        result_box.insert(tk.END, "Summary of detected malicious files:\n")
        for file in malicious_files:
            result_box.insert(tk.END, f"- {file}\n")
    else:
        result_box.insert(tk.END, "No malicious files detected.\n")

    result_box.yview(tk.END)
    return malicious_files

# 隔离恶意文件，将其移至回收站_Quarantine malicious files and move them to the Trash
def isolate_files(malicious_files, result_box):
    if not malicious_files:
        messagebox.showinfo("Isolation", "No malicious files to isolate.")
        return

    result_box.insert(tk.END, "\nIsolating malicious files...\n")
    for file in malicious_files:
        try:
            file_path = os.path.normpath(file)  # 规范化路径
            send2trash(file_path)
            result_box.insert(tk.END, f"Isolated (moved to trash): {file_path}\n")
        except Exception as e:
            result_box.insert(tk.END, f"Failed to isolate {file}: {e}\n")
    result_box.insert(tk.END, "Isolation process completed.\n")
    result_box.yview(tk.END)


def create_ui():
    root = tk.Tk()
    root.title("Simple Anti-Malware")
    root.geometry("500x400")

    result_box = scrolledtext.ScrolledText(root, width=60, height=15)
    result_box.pack(pady=10)

    directory = tk.StringVar()

    def choose_directory():
        chosen_directory = filedialog.askdirectory()
        if chosen_directory:
            directory.set(chosen_directory)
            result_box.insert(tk.END, f"Selected directory: {chosen_directory}\n")
            result_box.yview(tk.END)

    def scan():
        result_box.delete('1.0', tk.END)
        selected_directory = directory.get()
        if not selected_directory:
            messagebox.showwarning("Warning", "Please select a directory to scan.")
            return
        global malicious_files
        malicious_files = scan_directory(selected_directory, result_box)

    def isolate():
        isolate_files(malicious_files, result_box)

    select_button = tk.Button(root, text="Choose Directory", command=choose_directory)
    select_button.pack(pady=5)

    scan_button = tk.Button(root, text="Scan Directory", command=scan)
    scan_button.pack(pady=5)

    isolate_button = tk.Button(root, text="Isolate Malicious Files", command=isolate)
    isolate_button.pack(pady=5)

    root.mainloop()


if __name__ == "__main__":
    create_ui()
